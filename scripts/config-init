#!/usr/bin/env bash

git clone --bare https://gitlab.com/pgalmiche/repo-setter.git $PWD/.repo_setter

# define config alias locally since the dotfiles
# aren't installed on the system yet

function repo_setter {
   git --git-dir=$PWD/.repo_setter --work-tree=$PWD $@
}

# create a directory to backup existing dotfiles to
mkdir -p .repo_setter-backup
repo_setter checkout
if [ $? = 0 ]; then
  echo "Checked out files from https://gitlab.com/pgalmiche/repo-setter.git";
  else
    echo "Moving existing files to ./.repo_setter-backup";
    repo_setter checkout 2>&1 | egrep "^\s+" | awk {'print $1'} | xargs -I{} sh -c 'mkdir -p .repo_setter-backup/$(dirname {}); mv {} .repo_setter-backup/{}'
fi

# checkout dotfiles from repo
repo_setter checkout

# remove the repo setter once used
echo ".repo_setter folder removed."
echo "You can find in the .repo_setter-backup folder your old files"
rm -r ./.repo_setter

rm README.md LICENSE install/.env
mv README.md.template README.md
mv install/.env.template install/.env

# overwrite the [USER] etc in README.md
read -p "Enter your git username: " USER </dev/tty
sed -i "s/USER/$USER/g" README.md

read -p "Enter your git repo: " REPO </dev/tty
sed -i "s/YOUR_REPO/$REPO/g" README.md

echo "You can choose as many as you want in: python latex node_js"
read -p "Enter the containers to use: " CONTAINERS </dev/tty
sed -i "s/BOXES/$CONTAINERS/g" install/.env


# Extract the first container chosen
FIRST_CONTAINER=$(echo $CONTAINERS | awk '{print $1}')

# Move each container directory from 'demos' to the root directory
for CONTAINER in $CONTAINERS; do
    SRC_DIR="demos/$CONTAINER"
    TARGET_DIR="./$CONTAINER"
    if [ -d "$SRC_DIR" ]; then
        echo "Moving $SRC_DIR to $TARGET_DIR in the root directory."
        mkdir -p "$TARGET_DIR"
        mv "$SRC_DIR"/* "$TARGET_DIR/"
    else
        echo "Warning: $SRC_DIR does not exist."
    fi
done

# Set the REPOCODE path to be inside the first container chosen
if [ -n "$FIRST_CONTAINER" ]; then
    REPOCODE="../$FIRST_CONTAINER/"
    sed -i "s|MYCODE|$REPOCODE|g" install/.env
fi

# Remove the 'scripts' folder if it exists
if [ -d "scripts" ]; then
    echo "Removing 'scripts' directory."
    rm -rf "scripts"
fi

# Handle CI choice for documentation or using first container CI
read -p "Choose CI purpose: Enter 'doc' for documentation CI or any other key to use first container CI: " CI_PURPOSE </dev/tty

if [ "$CI_PURPOSE" == "doc" ]; then
    echo "Setting up CI for documentation."
    # No change needed to gitlab-ci.yml
else
    echo "Setting up CI for the first container chosen: $FIRST_CONTAINER"
    cp "ci_files/.gitlab-ci-${FIRST_CONTAINER}.yml" .gitlab-ci.yml
fi

# Remove demo as files have been moved
if [ -d "demos" ]; then
    echo "Removing 'demos' directory."
    rm -rf "demos"
fi 

# Keep only Dockerfiles corresponding to chosen containers
DOCKERFILES_TO_KEEP=()
for CONTAINER in $CONTAINERS; do
    DOCKERFILES_TO_KEEP+=("Dockerfile.${CONTAINER}")
done

echo "Keeping Dockerfiles: ${DOCKERFILES_TO_KEEP[*]}"
for FILE in install/Dockerfile.*; do
    if [[ ! " ${DOCKERFILES_TO_KEEP[*]} " =~ $(basename "$FILE") ]]; then
        echo "Removing $FILE as it does not correspond to any chosen container."
        rm -f "$FILE"
    fi
done

# Check if any of the chosen containers include 'python'
if [[ " ${CONTAINERS[*]} " =~ "python" ]]; then
    echo "Python is one of the chosen containers. Keeping Python-related files."
else
    echo "Python is not among the chosen containers. Removing Python-related files."
    rm -f install/pyproject.toml install/requirements.txt 
fi

# Check if any of the chosen containers include 'python'
if [[ " ${CONTAINERS[*]} " =~ "pytorch" ]]; then
    echo "Pytorch is one of the chosen containers. Keeping Pytorch-related files."
else
    echo "Pytorch is not among the chosen containers. Removing Pytorch-related files."
    rm -f install/requirements_torch.txt 
fi

sed -i "s/DOCKER_NAME/$REPO/g" install/.env
sed -i "s/MYSELF/$USER/g" install/.env

# set the uid/gid of the current username
sed -i "s/MYUID/$UID/g" install/.env
sed -i "s/MYGID/$GID/g" install/.env

# set GitLab urls from the entered 
DOC_URL="https://${USER}.gitlab.io/${REPO}"
sed -i "s|YOUR_DOC_URL|$DOC_URL|g" README.md

REPO_URL="https://gitlab.com/${USER}/${REPO}.git"
sed -i "s|YOUR_URL|$REPO_URL|g" README.md


